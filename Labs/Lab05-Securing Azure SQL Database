# Lab 05: Securing Azure SQL Database

## ðŸ§© Overview
This lab focuses on implementing security controls for an **Azure SQL Database**, including enabling Microsoft Defender for SQL, classifying sensitive data, and configuring auditing to monitor access and activity.

The goal is to ensure Azure SQL resources meet security best practices through visibility, classification, and protection of data and access.

---

## Step 1: Deploy the Azure SQL Environment
A new SQL Server and SQL Database were deployed using a pre-configured **ARM template**.  
This created:
- A logical SQL server  
- A single SQL database  
- Networking and security dependencies automatically linked  

![Deployed JSON template](./IMG_2175.jpeg)

Once the deployment completed successfully, both the SQL server and SQL database appeared in the resource group.

![Deployed SQL Database and Server](./IMG_2176.jpeg)

---

## Step 2: Enable Microsoft Defender for SQL
Next, **Microsoft Defender for SQL** was enabled from **Defender for Cloud** under the SQL resources section.  
This added advanced threat protection to the SQL server, providing real-time detection of potential SQL injection, brute-force attempts, and anomalous access patterns.

![Defender for SQL Enabled](./IMG_2177.jpeg)

---

## Step 3: Classify Sensitive Data
Data discovery and classification was performed on the database to identify fields that may contain sensitive information such as names, email addresses, or credit card data.  
The recommendations tab displayed potential classifications which were reviewed and accepted.

![Classification Recommendations Displayed](./IMG_2178.jpeg)

After accepting the recommendations, the classification overview reflected the updated charts showing **sensitivity label distribution** and **information type coverage**.

![Classification Overview Charts](./IMG_2180.jpeg)

---

## Step 4: Configure SQL Auditing
SQL auditing was enabled at the **server level**, directing logs to an Azure Storage account.  
This ensures all login attempts, data access, and modification activities are captured for forensic review and compliance.

![Auditing Configuration](./IMG_2181.jpeg)

---

## Step 5: Simulate and Review Security Events
A failed login attempt to the SQL database was simulated using the **Query Editor (Preview)** to test the auditing setup.  
The system successfully recorded the authentication failure, validating the audit configuration.

![Failed Login Attempt](./IMG_2185.jpeg)

The audit logs were then reviewed within the Azure Portal, confirming that events were being stored in the specified Storage account.

![Audit Records Captured](./IMG_2187.jpeg)

---

## âœ… Summary
In this lab, an **Azure SQL Database** was secured through multiple layers:
- Defender for SQL enabled to detect threats  
- Sensitive data discovered and classified  
- SQL auditing configured and validated through a failed login attempt  

This hands-on exercise reinforced the importance of layered database security â€” ensuring proactive monitoring, regulatory compliance, and protection of data integrity in Azure.